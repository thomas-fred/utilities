#!/soge-home/users/cenv0899/micromamba/envs/peruse/bin/python -i

"""
Try and read the contents of data file paths passed from command line, then
open a Python prompt.

Paths and opened files are available in integer keyed dictionaries, `data`
and `paths`, respectively.

You will require an appropriate environment to run this script. Install with:
```
micromamba create -f peruse-env.yaml -y
```
"""

import importlib
import json
import logging
from pathlib import Path
import os
import sys
from typing import Callable, Any


def read_json(path: str) -> dict:
    with open(path, "r") as fp:
        data = json.load(fp)
    return data


def read_text(path: str) -> list[str]:
    with open(path, "r") as fp:
        return fp.readlines()


def delayed_reader(module_name: str, func_name: str, alias: str | None = None):
    """Return a callable that lazily imports and calls the given function."""
    def reader(path, *args, **kwargs):
        module = importlib.import_module(module_name)
        globals()[alias or module_name] = module
        func = getattr(module, func_name)
        return func(path, *args, **kwargs)
    return reader


EXTENSION_READER: dict[str, Callable] = {
    ".csv": delayed_reader("pandas", "read_csv", alias="pd"),
    ".geoparquet": delayed_reader("geopandas", "read_parquet", alias="gpd"),
    ".gpkg": delayed_reader("geopandas", "read_file", alias="gpd"),
    ".gpq": delayed_reader("geopandas", "read_parquet", alias="gpd"),
    ".jpg": delayed_reader("matplotlib.image", "imread"),
    ".jpeg": delayed_reader("matplotlib.image", "imread"),
    ".json": read_json,
    ".log": read_text,
    ".parq": delayed_reader("pandas", "read_parquet", alias="pd"),
    ".parquet": delayed_reader("pandas", "read_parquet", alias="pd"),
    ".pq": delayed_reader("pandas", "read_parquet", alias="pd"),
    ".nc": delayed_reader("xarray", "open_dataset", alias="xr"),
    ".m": delayed_reader("scipy.io", "loadmat"),
    ".md": read_text,
    ".mat": delayed_reader("scipy.io", "loadmat"),
    ".png": delayed_reader("matplotlib.image", "imread"),
    ".shp": delayed_reader("geopandas", "read_file", alias="gpd"),
    ".tif": delayed_reader("xarray", "open_dataset", alias="xr"),
    ".tiff": delayed_reader("xarray", "open_dataset", alias="xr"),
    ".txt": read_text,
    ".xlsx": delayed_reader("pandas", "read_excel", alias="pd"),
    ".zarr": delayed_reader("xarray", "open_zarr", alias="xr"),
}


if __name__ == "__main__":

    logging.basicConfig(format="%(asctime)s %(message)s", level=logging.INFO)

    if len(sys.argv) < 2:
        raise ValueError(
            f"Require at least one path to try and open, given {len(sys.argv) - 1}"
        )

    paths: dict[int, str] = {}
    data: dict[int, Any] = {}
    for i, path in enumerate(sys.argv[1:]):

        path = Path(path)
        paths[i] = path
        data[i] = None

        if not path.exists():
            logging.info(f"Couldn't find {path} from {os.getcwd()}")
            continue

        try:
            extension, = path.suffixes
        except ValueError:
            logging.info(f"Need exactly one file extension for {path.name}")
            continue

        try:
            reader: Callable = EXTENSION_READER[extension.lower()]
        except KeyError:
            logging.info(f"Don't know how to open {extension} files")
            continue

        try:
            data[i] = reader(path)
        except Exception as error:
            logging.info(error)
            continue

        logging.info(f"data[{i}] = {path}")

